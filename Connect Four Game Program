#include<iostream>
#include<string>
#include<chrono>
#include<thread>
#include<atomic>
#include<cmath>
#include<vector>
#include<map>
#include<algorithm>
#include <ctime>
#define RESET   "\033[0m"
#define RED     "\033[1;31m"
#define BLUE    "\033[1;34m"

using namespace std;

const int ROW = 6;
const int COL = 7;

void fill_board(char board[ROW][COL]){
    for(int i = 0; i<ROW; i++){
        for(int j = 0; j<COL; j++){
            board[i][j] = '.';
        }
    }
}

void print_board(char board[ROW][COL]){
    for(int i = 0; i<ROW; i++){
        cout<<i<<"| ";
        for(int j = 0; j<COL; j++){
            if(board[i][j] == 'X'){
                cout<<BLUE<<board[i][j]<<RESET<<" | ";
            }
            else if(board[i][j] == 'O'){
                cout<<RED<<board[i][j]<<RESET<<" | ";
            }
            else cout<<board[i][j]<<" | ";
        }
        cout<<"\n";
    }
    cout<<"+---------------------------+\n";
    cout<<"  0   1   2   3   4   5   6  \n";
}

int empty_box_check(char board[ROW][COL], int move){
        for(int a = ROW-1; a >= 0; a--)
            if(board[a][move] == '.') return a;

    return -1;
}

bool check_horizontal(char board[ROW][COL], char player){
    for(int i = 0; i<ROW; i++){
        for(int j = 0; j<=COL - 4; j++){
            if(board[i][j] == player 
                && board[i][j+1] == player 
                && board[i][j+2] == player 
                && board[i][j+3] == player) 
                return true;   
       }
    }
    return false;
}

bool check_vertical(char board[ROW][COL], char player){
    for(int i = 0; i<=ROW - 4; i++){
        for(int j = 0; j<COL; j++){
            if(board[i][j] == player 
                && board[i+1][j] == player 
                && board[i+2][j] == player 
                && board[i+3][j] == player) 
                return true;   
       }
    }
    return false;
}

bool check_diagonal_right(char board[ROW][COL], char player){
    for(int i = 0; i<=ROW - 4; i++){
        for(int j = 0; j<=COL - 4; j++){
            if(board[i][j] == player 
                && board[i+1][j+1] == player 
                && board[i+2][j+2] == player 
                && board[i+3][j+3] == player) 
                return true;   
       }
    }
    return false;
}

bool check_diagonal_left(char board[ROW][COL], char player){
    for(int i = 0; i<=ROW - 4; i++){
        for(int j = 3; j<COL; j++){
            if(board[i][j] == player 
                && board[i+1][j-1] == player 
                && board[i+2][j-2] == player 
                && board[i+3][j-3] == player) 
                return true;   
       }
    }
    return false;
}

bool move_player(char board[ROW][COL], char player, int move){
    int index = empty_box_check(board, move);
    if(index != -1){
        board[index][move] = player;
        return true;
    }
    else{
        cout<<"Column is Full\n";
        return false;
    }
}

bool full_check(char board[ROW][COL]){
    for(int i = 0; i<ROW; i++){
        for(int j = 0; j<COL; j++){
             if(board[i][j] == '.') return false;   
        }
    }
    return true;
}

int main(){
    srand(time(0));

    char board[ROW][COL];
    int option, move;
    char player;
    fill_board(board);

    cout<<"==Welcome to Connect Four Game==\n";
    cout<<"1. Play\n";
    cout<<"2. Quit\n";
    cout<<"================================\n";

    cout<<"Enter 1-2: ";
    cin>>option;

    int random = rand() % 2 + 1;
    player = (random == 1) ? 'X' : 'O';
    string color = (player == 'X') ? BLUE : RED;
    
    switch(option){
        case 1: 
            print_board(board);
            while(true){
                string color = (player == 'X') ? BLUE : RED;
                
                cout<<color<<player<<" Turns to Play\n"<<RESET;
                cout<<"Enter 0-6 to Play: ";
                cin>>move;

                if(!move_player(board, player, move)) continue;
                print_board(board);

                if(check_horizontal(board, player) 
                    || check_vertical(board, player) 
                    || check_diagonal_right(board, player) 
                    || check_diagonal_left(board, player)){
                    cout<<color<<player<<" Wins the Game\n"<<RESET;
                    return 0;
                }

                if(full_check(board)){
                    cout<<"The Game is Draw!\n";
                    return 0;
                }
                player = (player == 'X') ? 'O' : 'X';

            }
            break;

        case 2: 
            return 0;
    }
    return 0;
}


